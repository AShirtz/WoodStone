using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// This class just makes the maps easy to represent (because it's a jam yo)
/// 
/// NOTE:
///     Because the way the array constructors are formatted, be sure to read the map with [Vertical, Horizontal]
/// 
/// Tile Definitions
///     -2 => Border of map (to make it symmetrical)
///     -1 => No Tile
///     0  => Open Space
///     1  => First Player
///     2  => Second Player
///     etc.
///     
/// </summary>
public class Maps
{
    public static readonly int mapAWidth = 21;
    public static readonly int mapAHeight = 21;
    
    public static readonly int[,] mapA = new int[,]
        {
            { -2, -1, -1, -1,  0,  0,  0,  0,   0, -1, -1, -1, -1,  0,   0,  0,  0,  0, -1, -1, -1},
            { -1, -1, -1,  0,  0,  0,  0,  0,   0, -1, -1, -1,  0,  0,   0,  0,  0,  0, -1, -1, -1},
            { -2, -1, -1,  0,  0,  0,  0,  0,   0,  0, -1, -1,  0,  0,   0,  0,  0,  0,  0, -1, -1},
            { -1, -1,  0,  0,  0, -1, -1,  0,   0,  0,  0,  0,  0,  0,  -1, -1,  0,  0,  0, -1, -1},
            { -2, -1,  0,  0,  0,  0, -1,  0,   0,  1,  0,  0,  2,  0,   0, -1,  0,  0,  0,  0, -1},
            { -1,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0, -1},
            { -2,  0,  0,  0,  0,  0,  0,  0,   0,  1,  0,  0,  2,  0,   0,  0,  0,  0,  0,  0,  0},
                                               
            {  0,  0,  0,  0,  0,  0,  0,  0,   0,  0, -1,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0},
            { -2,  0,  0,  0,  0,  0,  0,  0,   0,  0, -1, -1,  0,  0,   0,  0,  0,  0,  0,  0,  0},
            {  1,  1,  1,  1,  0,  0,  0,  0,   0, -1, -1, -1,  0,  0,   0,  0,  0,  2,  2,  2,  2},
            { -2,  1,  1,  1,  1,  1,  1,  1,   1, -1, -1, -1, -1,  2,   2,  2,  2,  2,  2,  2,  2},
            {  1,  1,  1,  1,  0,  0,  0,  0,   0, -1, -1, -1,  0,  0,   0,  0,  0,  2,  2,  2,  2},
            { -2,  0,  0,  0,  0,  0,  0,  0,   0,  0, -1, -1,  0,  0,   0,  0,  0,  0,  0,  0,  0},
            {  0,  0,  0,  0,  0,  0,  0,  0,   0,  0, -1,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0},
                                               
            { -2,  0,  0,  0,  0,  0,  0,  0,   0,  1,  0,  0,  2,  0,   0,  0,  0,  0,  0,  0,  0},
            { -1,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0, -1},
            { -2, -1,  0,  0,  0,  0, -1,  0,   0,  1,  0,  0,  2,  0,   0, -1,  0,  0,  0,  0, -1},
            { -1, -1,  0,  0,  0, -1, -1,  0,   0,  0,  0,  0,  0,  0,  -1, -1,  0,  0,  0, -1, -1},
            { -2, -1, -1,  0,  0,  0,  0,  0,   0,  0, -1, -1,  0,  0,   0,  0,  0,  0,  0, -1, -1},
            { -1, -1, -1,  0,  0,  0,  0,  0,   0, -1, -1, -1,  0,  0,   0,  0,  0,  0, -1, -1, -1},
            { -2, -1, -1, -1,  0,  0,  0,  0,   0, -1, -1, -1, -1,  0,   0,  0,  0,  0, -1, -1, -1}
        };
}